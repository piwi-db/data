Title: Calardis Blanc

----

Hybridization: 0cd61798-e613-4d92-bfa7-757f5cb90f17, 93e24ff4-6af2-4c2b-ab0d-c6972ce2302b

----

Hybridizationyear: 1993

----

Grower: Rudolf Eibach &amp; Reinhard Töpfer, JKI Siebeldingen

----

Cpvrde: 2018

----

Cpvreu: 2019

----

Resistanceloci:

-
  gene: ren
  loci: 3.0
-
  gene: ren
  loci: 9.0
-
  gene: rpv
  loci: 3.1
-
  gene: rpv
  loci: 3.2
-
  gene: rgb
  loci: ''

----

Cover: - 'file://mOadTf32Wa97ugDC'

----

Criterias:

aeedea0b-3aba-4249-bb4d-15db60026741:
  c2f057a0-4147-4441-8869-7e80761ecbfc:
    value:
      peronospora: 3
      peronosporaTolerance: false
      oidiumTolerance: true
      oidium: 2
      botrytis: 2
      botrytisTolerance: true
      bidwellii: 2
      bidwelliiTolerance: true
    sources:
      - b22148ab-2d22-44a5-a523-485191fd4c02
    compares: []
66bd8ab0-6cc4-46e9-8130-89fd72829abf:
  c88c417f-6be5-44b4-a474-9256223a0342:
    value: '<p>Durch die eher späte Reife ist Calardis Blanc für einen Anbau auf klimatisch weniger begünstigten Standorten derzeit (2020) weniger geeignet, ebenso auf sehr flachgründigen Böden. Bei anhaltender Trockenheit ist eine Bewässerung sehr von Vorteil. Weinbaulich werden an diese Rebsorte keine besonderen Erfordernisse gestellt. Eine Teilentblätterung der Traubenzone kann zur Botrytisvermeidung beitragen, die Heftarbeiten sind vergleichbar mit Riesling. </p>'
    sources:
      - 36d8449a-1f6c-4b37-9f4c-e90446fe9190
    compares: []
  3ae21351-c203-4add-bc75-c02539a5f596:
    value: '<p>Die Calardis Blanc Trauben werden auch in sehr trockenen und heißen Jahren kaum durch Sonnenbrand geschädigt. Aufgrund der hohen Pilzfestigkeit sowie einer geringen Attraktivität für Fraßschädlinge aufgrund der späteren Reife ist die Sorte besonders für nicht mechanisierbare Lagen geeignet. Die Sorte zeigt allgemein eine gute Vitalität, was sich durch dunkelgrünes, dichtes Laub bemerkbar macht und auf eine hohe Photosytheserate schließen lässt.</p>'
    sources:
      - 3a4a6a75-528f-4765-aff5-c083ff74742b
      - 36d8449a-1f6c-4b37-9f4c-e90446fe9190
    compares:
      b820ced1-6a52-4f8d-9346-b70784febb62: '<p>Sonnenbrandschäden sind im Vergleich zu Riesling geringer.</p>'
  182161b1-37c7-45b2-a1df-6699a09d7d1b:
    value:
      - 708c7c18-1acb-4442-a1c1-7459918641c4
    sources:
      - 3a4a6a75-528f-4765-aff5-c083ff74742b
    compares:
      b820ced1-6a52-4f8d-9346-b70784febb62: '<p>Der Austriebszeitpunkt ist im Vergleich zum Riesling etwas verzögert, dies kommt der Vermeidung von Spätfrostschäden zugute. Der relativ späte Austrieb schützt zudem vor Spätfrostschäden.</p>'
  93c4312e-814c-42c2-93cf-a69f5d5d9bf1:
    value:
      - c335f01a-89ac-4cb3-9c5a-ade0e76c9434
    sources: []
    compares: []
  37f89954-8e2b-4f41-84af-313c284f2657:
    value: '<p>Die Beeren sind mittelgroß und bei Vollreife werden die voll besonnten Beeren goldgelb und zeigen bräunliche Reflexe.</p>'
    sources: []
    compares:
      b820ced1-6a52-4f8d-9346-b70784febb62: ''
  087127be-70b8-4de9-99be-b1bc1fa2f5df:
    value:
      - 17581ead-5b12-44e3-a4b5-2a6a4f83ebc7
    sources: []
    compares: []
  bae16de0-d186-428c-a8fa-6a791a4330ff:
    value:
      - 6d7acded-a524-4c85-9abc-c8aa991d282d
    sources: []
    compares: []
  063eabbc-9625-4c44-acb5-aaa117f7cbe4:
    value: '<p>Die Traube reift mittelspät bis spät, vor dem Riesling, allerdings langsamer ab 85°Oe.</p>'
    sources: []
    compares: []
  2f4fe39d-6916-4bbb-96bc-afa2f927dc8a:
    value: '<p>Der Lesezeitpunkt kann wegen der Botrytisfestigkeit meist nach dem Riesling erfolgen. Lesereife ist in der Regel Ende September bis Mitte Oktober. Die lange Hängzeit bei stabiler Fäulnisfestigkeit und geringem Mostgewichtsanstieg lassen ein breites Erntefenster zu. </p>'
    sources:
      - 3a4a6a75-528f-4765-aff5-c083ff74742b
      - 36d8449a-1f6c-4b37-9f4c-e90446fe9190
    compares:
      b820ced1-6a52-4f8d-9346-b70784febb62: '<p>Der Lesezeitpunkt ist mit dem des Riesling vergleichbar</p>'
  07fa6cda-cf20-4c75-aa05-2d94500ed9b7:
    value: '<p>Der potentielle Ertrag ist oft höher als bei Riesling, da kaum eine Neigung zur Verrieslung besteht und die Traubenzahl je Trieb hoch ist. Bei hoher Ertragsbelastung leiden Traubenqualität und Vitalität. Mittleres bis hohes Ertragsniveau bei guter und gleichmäßiger Ausreife der Trauben macht den Anbau wirtschaftlich, besonders in Jahren mit schlechter Blüte. Durch die hohe Fruchtbarkeit ist der Ertrag hoch und sollte nicht voll ausgereizt werden. Zudem ist die Sorte ertragskonstant, neigt also wenig zu Alternanz.</p>'
    sources:
      - 36d8449a-1f6c-4b37-9f4c-e90446fe9190
    compares:
      b820ced1-6a52-4f8d-9346-b70784febb62: '<p>Der potentielle Ertrag ist oft höher als bei Riesling, da kaum eine Neigung zur Verrieslung besteht und die Traubenzahl je Trieb hoch ist. </p>'
205a4330-4480-4102-b89e-6116c17b3b80:
  e5f09a3f-fc78-4a69-beb3-df3eeeeb8fd0:
    value: '<p>Die Weine zeigen eine Analogie zum fruchtigen Rieslingprofil. Sie zeichnen sich durch feinwürzige fruchtige Aromatik aus, ohne dabei einerseits flach oder andererseits säuerlich zu erscheinen. Dies liegt am moderaten Alkoholgehalt und der reifen Säure. </p>'
    sources:
      - 36d8449a-1f6c-4b37-9f4c-e90446fe9190
    compares:
      b820ced1-6a52-4f8d-9346-b70784febb62: '<p>Die Weine zeigen eine Analogie zum fruchtigen Rieslingprofil.</p>'
  3afc5f29-5a03-46c8-86e5-df5484ed26fd:
    value:
      - fa696774-ff74-4bcf-ab91-f8db8a4abd0a
      - cc742c0c-b50a-433c-bb59-5ff43671d79d
    sources: []
    compares: []
  ffac7fac-02b0-4284-a005-114650077c1a:
    value: '<p>Der Wein besitzt ein finessreiches Aroma von Maracuja, Blutorange und frisch geschnittenem Apfel gepaart mit einem zarten, feinwürzigen Bukett und zeichnet sich durch eine spritzige Säure aus, durch die er als Sektgrundwein gut geeignet ist.</p>'
    sources:
      - 3a4a6a75-528f-4765-aff5-c083ff74742b
    compares: []
27b11ebf-009e-4468-bdff-d0124cf815a4:
  67c0df72-a4fe-4404-8328-1873b42c7e31:
    value: '<p>25,93 Hektar (2022)</p>'
    sources: []
    compares: []

----

Uuid: 7nLlNDu3Hcz9aTNK