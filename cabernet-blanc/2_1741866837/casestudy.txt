Title: 1741866837

----

Reports:

66bd8ab0-6cc4-46e9-8130-89fd72829abf:
  3ae21351-c203-4add-bc75-c02539a5f596:
    value: <ul><li><p>Insgesamt verringert sich der Arbeitsaufwand der Laubarbeiten
      bei uns bei Cabernet Blanc um 50 % gegenüber unseren klassischen
      Rebsorten.  </p></li><li><p>Viel vegetatives Wachstum, das schnell ins
      Holz geht, dadurch aber auch Esca anfällig wie Sauvignon
      Blanc.  </p></li><li><p>Eventuell auf zwei Bögen aufteilen.</p></li></ul>
    sources: []
    compares: {}
  c88c417f-6be5-44b4-a474-9256223a0342:
    value: <ul><li><p>Für eine Sauvignon Blanc Stilistik sollte auf leichtem Boden
      mit hohem Kalkgehalt gepflanzt werden. </p></li></ul>
    sources: []
    compares: {}
  d44809ef-9291-4b10-8529-7f58017b29d5:
    value: <ul><li><p>Cabernet Blanc wächst bei uns sehr senkrecht mit stabiler
      Laubwand und vielen Haken. Ein 50 cm langer Überstand der Laubwand stellt
      kein Problem dar. Eine Vorrichtung als Unterstützung kann niedriger als
      üblich sein. </p></li></ul>
    sources: []
    compares: {}
  182161b1-37c7-45b2-a1df-6699a09d7d1b:
    value: <ul><li><p>Später Austrieb, d.h. etwa 10 Tage nach Chardonnay bzw. 5 Tage
      nach Müller-Thurgau und Grauburgunder.               </p></li><li><p>Durch
      den späten Austrieb liegt Cabernet im Wuchs hinter den anderen
      Sorten.  Somit muss diese PIWI Rebsorte auch später geheftet und ein
      späterer Laubschnitt durchgeführt werden. </p></li></ul>
    sources: []
    compares:
      ca5689e8-057e-44f2-b0f2-147aeb98631c: "- Austrieb ca. 5 Tage nach Müller-Thurgau."
      c312f169-1a80-4b8d-b94d-80c27323df87: "- Austrieb ca. 5 Tage nach Grauburgunder."
      44847e98-92ce-450a-bd27-44f29d97a178: Austrieb ca. 10 Tage nach Chardonnay.
  572b3578-4fa6-4dc4-b716-c3ef77c86c7b:
    value: <ul><li><p>Kleine Blätter, dadurch keine Entblätterung notwendig.
      </p></li></ul>
    sources: []
    compares: {}
  2f4fe39d-6916-4bbb-96bc-afa2f927dc8a:
    value: <ul><li><p>Der Cabernet Blanc ist sehr gut geeignet für die
      Maschinenlese.   </p></li><li><p>Bei Handlese ein ca. 30 % höherer
      Aufwand, da viele Trauben mit wenig Gewicht vorhanden sind. </p></li></ul>
    sources: []
    compares: {}
  07fa6cda-cf20-4c75-aa05-2d94500ed9b7:
    value: <ul><li><p>Ertrag ist schwierig zu schätzen und vorherzusagen. Er liegt
      zwischen 50-150 kg/Ar. Im Schnitt geringer als beim Grauburgunder (etwa 90
      kg/Ar), </p></li></ul>
    sources: []
    compares:
      c312f169-1a80-4b8d-b94d-80c27323df87: Im Schnitt geringer als beim Grauburgunder (etwa 90 kg/Ar).
  0e69adaf-84ce-4472-9e16-5a51c2438c9f:
    value: <ul><li><p>Wir haben insgesamt 1,5 ha Cabernet Blanc im Anbau. Bisher
      keine Erfahrung mit Minimalschnitt bei dieser Sorte. </p></li></ul>
    sources: []
    compares: {}
  3747edda-c5f7-4b7b-b241-e344b6da1802:
    value: <ul><li><p>Peronospora-Anfälligkeit ist extrem in der
      Blüte!  </p></li><li><p>Bei einer Primärinfektion vor der Blüte ist ein
      normaler Pflanzenschutz während der Blüte
      unabdingbar.  </p></li><li><p>Blätter und Schrotkorn große Beeren sind
      dann wiederum resistent. Bisher keine Probleme mit
      Botrytis.                               </p></li><li><p>In guten Jahren
      sind 2 Behandlungen, in schwierigen Jahren bis zu 6 Behandlungen notwendig
      </p></li></ul>
    sources: []
    compares: {}
aeedea0b-3aba-4249-bb4d-15db60026741:
  c2f057a0-4147-4441-8869-7e80761ecbfc:
    value: <ul><li><p>Peronospora-Anfälligkeit ist extrem in der
      Blüte!     </p></li><li><p>Bei einer Primärinfektion vor der Blüte ist ein
      normaler Pflanzenschutz während der Blüte unabdingbar.  - Blätter und
      Schrotkorn große Beeren sind dann wiederum
      resistent.  </p></li><li><p>Bisher keine Probleme mit
      Botrytis.    </p></li><li><p>In guten Jahren sind 2 Behandlungen, in
      schwierigen Jahren bis zu 6 Behandlungen notwendig </p></li></ul>
    sources: []
    compares: {}
205a4330-4480-4102-b89e-6116c17b3b80:
  3afc5f29-5a03-46c8-86e5-df5484ed26fd:
    value: <ul><li><p>Die Aromatik von Carbernet Blanc ist schon ab 1 % Verschnitt
      spürbar. Deshalb nicht für Entsorgung über Verschnitt
      geeignet.  </p></li><li><p>Sektgrundwein im NOU Cremant (Piwi
      Kollektiv).  </p></li><li><p>Trockener Standardwein (Weingut Friedrich
      Kiefer). </p></li><li><p>Naturwein und Cuvée mit Müller-Thurgau
      (Ökologisches Weingut Schmidt). </p></li></ul>
    sources: []
    compares: {}
  a57c8943-d2ec-40d3-b237-2f405b597bb9:
    value: <ul><li><p>Im Weinausbau behandeln wir ihn wie Sauvignon Blanc. Extrem
      reaktiv. - Aromatik sehr grün. - Im Gegensatz zum Sauvignon Blanc auch
      viel grüne Brennnessell-Aromatik im Mund. - Sektgrundweinfähig mit ca. 80
      Grad Oechsle, etwa eine Woche vor Müller-Thurgau. Für Standardwein mit 90
      Grad Oechsle oder zwölfeinhalb Volumen Prozent mit Spätburgunder oder acht
      Tage nach Müller-Thurgau (abhängig vom Ertrag). </p></li></ul>
    sources: []
    compares:
      ca5689e8-057e-44f2-b0f2-147aeb98631c: >-
        Sektgrundweinfähig mit ca. 80 Grad Oechsle, etwa eine Woche vor
        Müller-Thurgau. 

        Für Standardwein mit 90 Grad Oechsle oder zwölfeinhalb Volumen Prozent
        acht Tage nach Müller-Thurgau (abhängig vom Ertrag).
      8e91c66e-f6e8-4a7b-8576-376925ee49e2: Für Standardwein mit 90 Grad Oechsle oder
        zwölfeinhalb Volumen Prozent mit Spätburgunder.
a383f6c4-baec-4dbd-8a08-13c831eaa966: {}
2f368492-66a2-4f6b-baec-efba12a95ed1: {}
30ffc9b9-37a4-4511-bccd-b17ac9de9a6a: {}
27b11ebf-009e-4468-bdff-d0124cf815a4:
  67c0df72-a4fe-4404-8328-1873b42c7e31:
    value: null
    sources: []
    compares: {}

----

Author: - 'user://iznpPnTo'

----

Creationdate: 2025-03-13 12:53:57

----

Modificationdate: 2025-04-02 08:33:08

----

Uuid: eLTnIkyrFq1JDt6i